using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace SplineMesh {
    /// <summary>
    /// Example of component to show that the spline is an independant mathematical component and can be used for other purposes than mesh deformation.
    /// 
    /// This component is only for demo purpose and is not intended to be used as-is.
    /// 
    /// We only move an object along the spline. Imagine a camera route, a ship patrol...
    /// </summary>
    //[ExecuteInEditMode]
    [RequireComponent(typeof(Spline))]
    public class ExampleFollowSpline : MonoBehaviour {
        private GameObject generated;
        private Spline spline;
        


        public GameObject Follower;
        public float DurationInSecond;

        public float ratio = 0;
        public float roadSize;

        private void OnEnable() {
            
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : Instantiate(Follower, gameObject.transform);
            generated.name = generatedName;

            spline = GetComponent<Spline>();
//#if UNITY_EDITOR

//                EditorApplication.update += EditorUpdate;

//#endif
 //     }

//        void OnDisable() {
//#if UNITY_EDITOR

//                EditorApplication.update -= EditorUpdate;

//#endif
        }

        void Update() {


            //foreach(var g in busy)
            //{
            //    if (isForward)
            //    {
            //        rate += (Time.deltaTime / DurationInSecond) * spline.Length;
            //        if (rate > spline.Length - 1)
            //        {
            //            rate -= spline.Length - 1;
            //        }
            //    }
            //    else
            //    {
            //        rate -= (Time.deltaTime / DurationInSecond) * spline.Length;
            //        if (rate < 0)
            //        {
            //            rate += spline.Length - 1;
            //        }
            //    }
            //}
            
            

        }

        public void PlaceFollower(Transform t, float rate) {
            if (generated != null) {
                //CurveSample sample = spline.GetSample(rate);
                CurveSample sample = spline.GetSampleAtDistance(rate); ;
                //print(sample.location);
                t.position = sample.location;
                t.rotation = sample.Rotation;
                if(t.localScale.x > 0)
                {
                    t.position += t.right * -roadSize;
                }
                else
                {
                    t.position += t.right * roadSize;
                }

            }
        }
    }
}
